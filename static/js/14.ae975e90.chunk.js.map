{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/simple-mode.js","../node_modules/@codemirror/legacy-modes/mode/dockerfile.js"],"names":["simpleMode","states","ensureState","states_","meta","languageData","hasIndentation","state","hasOwnProperty","list","orig","i","length","data","push","Rule","indent","dedent","startState","pending","copyState","s","slice","stack","token","tokenFunction","indentFunction","name","Error","next","this","regex","val","caret","flags","RegExp","ignoreCase","source","String","toRegex","apply","replace","result","asToken","stream","pend","shift","pos","text","curState","rule","matches","sol","match","pop","indentation","indentUnit","j","backUp","join","textAfter","dontIndentStates","doneIndentState","indexOf","rules","scan","dedentIfLineStart","m","exec","from","fromRegex","shells","shellsAsArrayRegex","expose","exposeRegex","instructionRegex","concat","instructionOnlyLine","instructionWithArguments","dockerFile","start","single","double","array","arguments","commentTokens","line"],"mappings":"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","file":"static/js/14.ae975e90.chunk.js","sourcesContent":["export function simpleMode(states) {\n  ensureState(states, \"start\");\n  var states_ = {}, meta = states.languageData || {}, hasIndentation = false;\n  for (var state in states) if (state != meta && states.hasOwnProperty(state)) {\n    var list = states_[state] = [], orig = states[state];\n    for (var i = 0; i < orig.length; i++) {\n      var data = orig[i];\n      list.push(new Rule(data, states));\n      if (data.indent || data.dedent) hasIndentation = true;\n    }\n  }\n  return {\n    startState: function() {\n      return {state: \"start\", pending: null, indent: hasIndentation ? [] : null};\n    },\n    copyState: function(state) {\n      var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};\n      if (state.stack)\n        s.stack = state.stack.slice(0);\n      return s;\n    },\n    token: tokenFunction(states_),\n    indent: indentFunction(states_, meta),\n    languageData: meta\n  }\n};\n\nfunction ensureState(states, name) {\n  if (!states.hasOwnProperty(name))\n    throw new Error(\"Undefined state \" + name + \" in simple mode\");\n}\n\nfunction toRegex(val, caret) {\n  if (!val) return /(?:)/;\n  var flags = \"\";\n  if (val instanceof RegExp) {\n    if (val.ignoreCase) flags = \"i\";\n    val = val.source;\n  } else {\n    val = String(val);\n  }\n  return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n}\n\nfunction asToken(val) {\n  if (!val) return null;\n  if (val.apply) return val\n  if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n  var result = [];\n  for (var i = 0; i < val.length; i++)\n    result.push(val[i] && val[i].replace(/\\./g, \" \"));\n  return result;\n}\n\nfunction Rule(data, states) {\n  if (data.next || data.push) ensureState(states, data.next || data.push);\n  this.regex = toRegex(data.regex);\n  this.token = asToken(data.token);\n  this.data = data;\n}\n\nfunction tokenFunction(states) {\n  return function(stream, state) {\n    if (state.pending) {\n      var pend = state.pending.shift();\n      if (state.pending.length == 0) state.pending = null;\n      stream.pos += pend.text.length;\n      return pend.token;\n    }\n\n    var curState = states[state.state];\n    for (var i = 0; i < curState.length; i++) {\n      var rule = curState[i];\n      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n      if (matches) {\n        if (rule.data.next) {\n          state.state = rule.data.next;\n        } else if (rule.data.push) {\n          (state.stack || (state.stack = [])).push(state.state);\n          state.state = rule.data.push;\n        } else if (rule.data.pop && state.stack && state.stack.length) {\n          state.state = state.stack.pop();\n        }\n\n        if (rule.data.indent)\n          state.indent.push(stream.indentation() + stream.indentUnit);\n        if (rule.data.dedent)\n          state.indent.pop();\n        var token = rule.token\n        if (token && token.apply) token = token(matches)\n        if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n          state.pending = [];\n          for (var j = 2; j < matches.length; j++)\n            if (matches[j])\n              state.pending.push({text: matches[j], token: rule.token[j - 1]});\n          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n          return token[0];\n        } else if (token && token.join) {\n          return token[0];\n        } else {\n          return token;\n        }\n      }\n    }\n    stream.next();\n    return null;\n  };\n}\n\nfunction indentFunction(states, meta) {\n  return function(state, textAfter) {\n    if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1)\n      return null\n\n    var pos = state.indent.length - 1, rules = states[state.state];\n    scan: for (;;) {\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n          var m = rule.regex.exec(textAfter);\n          if (m && m[0]) {\n            pos--;\n            if (rule.next || rule.push) rules = states[rule.next || rule.push];\n            textAfter = textAfter.slice(m[0].length);\n            continue scan;\n          }\n        }\n      }\n      break;\n    }\n    return pos < 0 ? 0 : state.indent[pos];\n  };\n}\n","import {simpleMode} from \"./simple-mode.js\"\n\nvar from = \"from\";\nvar fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\n\nvar shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\nvar shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\n\nvar expose = \"expose\";\nvar exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\n\nvar others = [\n  \"arg\", \"from\", \"maintainer\", \"label\", \"env\",\n  \"add\", \"copy\", \"volume\", \"user\",\n  \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"\n];\n\n// Collect all Dockerfile directives\nvar instructions = [from, expose].concat(shells).concat(others),\n    instructionRegex = \"(\" + instructions.join('|') + \")\",\n    instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n    instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\n\nexport const dockerFile = simpleMode({\n  start: [\n    // Block comment: This is a line starting with a comment\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    },\n    {\n      regex: fromRegex,\n      token: [null, \"keyword\"],\n      sol: true,\n      next: \"from\"\n    },\n    // Highlight an instruction without any arguments (for convenience)\n    {\n      regex: instructionOnlyLine,\n      token: [null, \"keyword\", null, \"error\"],\n      sol: true\n    },\n    {\n      regex: shellsAsArrayRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"array\"\n    },\n    {\n      regex: exposeRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"expose\"\n    },\n    // Highlight an instruction followed by arguments\n    {\n      regex: instructionWithArguments,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"arguments\"\n    },\n    {\n      regex: /./,\n      token: null\n    }\n  ],\n  from: [\n    {\n      regex: /\\s*$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      // Line comment without instruction arguments is an error\n      regex: /(\\s*)(#.*)$/,\n      token: [null, \"error\"],\n      next: \"start\"\n    },\n    {\n      regex: /(\\s*\\S+\\s+)(as)/i,\n      token: [null, \"keyword\"],\n      next: \"start\"\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  single: [\n    {\n      regex: /(?:[^\\\\']|\\\\.)/,\n      token: \"string\"\n    },\n    {\n      regex: /'/,\n      token: \"string\",\n      pop: true\n    }\n  ],\n  double: [\n    {\n      regex: /(?:[^\\\\\"]|\\\\.)/,\n      token: \"string\"\n    },\n    {\n      regex: /\"/,\n      token: \"string\",\n      pop: true\n    }\n  ],\n  array: [\n    {\n      regex: /\\]/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n      token: \"string\"\n    }\n  ],\n  expose: [\n    {\n      regex: /\\d+$/,\n      token: \"number\",\n      next: \"start\"\n    },\n    {\n      regex: /[^\\d]+$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /\\d+/,\n      token: \"number\"\n    },\n    {\n      regex: /[^\\d]+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  arguments: [\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    },\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n      token: \"string\",\n      next: \"start\"\n    },\n    {\n      regex: /\"/,\n      token: \"string\",\n      push: \"double\"\n    },\n    {\n      regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n      token: \"string\",\n      next: \"start\"\n    },\n    {\n      regex: /'/,\n      token: \"string\",\n      push: \"single\"\n    },\n    {\n      regex: /[^#\"']+[\\\\`]$/,\n      token: null\n    },\n    {\n      regex: /[^#\"']+$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /[^#\"']+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n});\n\n"],"sourceRoot":""}